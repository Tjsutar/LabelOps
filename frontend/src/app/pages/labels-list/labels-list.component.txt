import { Component, OnInit } from "@angular/core";
import { CommonModule } from "@angular/common";
import { LabelService } from "../../services/label.service";
import { Label, LabelData } from "../../models/label.model";
import { LabelComponent } from "../../components/label/label.component";
import { ToastService } from "../../services/toast.service";
import { PrintLabelsComponent } from "../print-labels/print-labels.component";
import { FormsModule } from "@angular/forms";

@Component({
  selector: "app-labels-list",
  standalone: true,
  imports: [CommonModule, LabelComponent, PrintLabelsComponent, FormsModule],
  templateUrl: "./labels-list.component.html",
})
export class LabelsListComponent implements OnInit {
  labels: Label[] = [];
  loading = true;
  error: string | null = null;
  selectedLabel: LabelData | null = null;
  showLabelPreview = false;
  exporting = false;

  constructor(
    private labelService: LabelService,
    private toastService: ToastService
  ) {}

  ngOnInit() {
    this.loadLabels();
    
  }

  loadLabels() {
    this.loading = true;
    this.error = null;

    this.labelService.getLabels().subscribe({
      next: (response: any) => {
        this.labels = response.labels || response;
        console.log("Frontend: Loaded labels:", this.labels);
        if (this.labels.length > 0) {
          console.log("Frontend: First label structure:", this.labels[0]);
          console.log("Frontend: First label id field:", this.labels[0].id);
          console.log(
            "Frontend: First label label_id field:",
            this.labels[0].label_id
          );
        }
        this.loading = false;
      },
      error: (err) => {
        this.error = "Failed to load labels. Please try again.";
        this.loading = false;
        console.error("Error loading labels:", err);
      },
    });
  }

  printLabel(labelId: string | undefined) {
    if (!labelId) {
      this.toastService.error("Label ID is missing! Cannot print label.");
      return;
    }

    console.log("Frontend: Attempting to print label with ID:", labelId);
    console.log("Frontend: Label ID type:", typeof labelId);
    console.log("Frontend: Label ID length:", labelId?.length);

    this.labelService.printLabel(labelId).subscribe({
      next: (response) => {
        console.log("Print job created:", response);
        this.toastService.success(
          `Print job created successfully! Job ID: ${response.print_job_id.substring(
            0,
            8
          )}...`
        );
        // Refresh the labels to update status
        this.loadLabels();
      },
      error: (err) => {
        console.error("Error printing label:", err);
        console.error("Error details:", err.error);
        this.toastService.error(
          "Failed to create print job. Please try again."
        );
      },
    });
  }

  printSelectedLabel() {
    if (this.selectedLabel?.ID) {
      this.printLabel(this.selectedLabel.ID);
      this.closeLabelPreview();
    }
  }

  previewLabel(label: any) {
    // Convert the label data to the format expected by the label component
    this.selectedLabel = {
      ID: label.id || label.ID,
      HEAT_NO: label.HEAT_NO || label.heat_no,
      PRODUCT_HEADING: label.PRODUCT_HEADING || label.product_heading,
      SECTION: label.SECTION || label.section,
      GRADE: label.GRADE || label.grade,
      ISI_TOP: label.ISI_TOP || label.isi_top,
      ISI_BOTTOM: label.ISI_BOTTOM || label.isi_bottom,
      MILL: label.MILL || label.mill,
      DATE1: label.DATE1 || label.date1,
      TIME: label.TIME || label.time1,
      LENGTH: label.LENGTH || label.length,
      BUNDLE_NO: label.BUNDLE_NO || label.bundle_no,
      PQD: label.PQD || label.pqd,
      UNIT: label.UNIT || label.unit,
      CHARGE_DTM: label.CHARGE_DTM || label.charge_dtm,
      URL_APIKEY: label.URL_APIKEY || label.url_apikey,
    };
    this.showLabelPreview = true;
  }

  closeLabelPreview() {
    this.showLabelPreview = false;
    this.selectedLabel = null;
  }

  exportLabels() {
    this.exporting = true;

    this.labelService.exportLabelsCSV().subscribe({
      next: (blob) => {
        console.log(blob);
        const filename = `labels_${new Date().toISOString().split("T")[0]}.csv`;
        this.labelService.downloadCSV(blob, filename);
        this.toastService.success("Labels exported successfully!");
        this.exporting = false;
      },
      error: (error) => {
        console.error("Error exporting labels:", error);
        this.toastService.error("Failed to export labels");
        this.exporting = false;
      },
    });
  }

  getStatusClass(status: string): string {
    switch (status) {
      case "success":
        return "bg-green-100 text-green-800";
      case "failed":
        return "bg-red-100 text-red-800";
      case "pending":
        return "bg-yellow-100 text-yellow-800";
      case "processing":
        return "bg-blue-100 text-blue-800";
      default:
        return "bg-gray-100 text-gray-800";
    }
  }
}
